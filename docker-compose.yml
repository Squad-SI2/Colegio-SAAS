
services:
  db:
    image: postgres:16-alpine           # Imagen liviana de Postgres 16
    container_name: fs_db               # Nombre del contenedor
    environment:                        # Variables para inicializar la DB
      POSTGRES_DB: ${POSTGRES_DB}               # Uso de variables de entorno de .env
      POSTGRES_USER: ${POSTGRES_USER}           # Uso de variables de entorno de .env
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}   # Uso de variables de entorno de .env
    ports:
      - "55432:5432"                    # Puerto host : Puerto predeterminado postgreSQL
    volumes:
      - pgdata:/var/lib/postgresql/data # Datos persistentes (no se pierden)

    healthcheck:
          test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} || exit 1"]
          interval: 5s
          timeout: 3s
          retries: 20

  backend:
    build: ./backend                    # Construye con Dockerfile de backend/
    container_name: fs_backend          # Nombre del contenedor
    env_file: .env                      # Carga variables de entorno
    user: "${UID:-1000}:${GID:-1000}"   # En linux/WSL evita archivos creados como root
    command: /bin/sh -lc "./entrypoint.sh"
    volumes:
      - ./backend:/app                  # Hot-reload: tu código ↔ contenedor
      - backend_static:/app/staticfiles # Estaticos recopilados
      - backend_media:/app/media        # Archivos subidos
    ports:
      - "8000:8000"                     # Puerto host : puerto predeterminado Django
    depends_on:
      db:
        condition: service_healthy      # Espera a que la DB este OK

  frontend:
    image: node:20-bookworm                   # Node debian -> para React + Vite
    container_name: fs_frontend               # Nombre del contenedor
    user: "${UID:-1000}:${GID:-1000}"         # evita archivos root
    working_dir: /app
    env_file: .env
    volumes:
      - ./frontend:/app                        # Hot-reload del frontend
      - node_modules_frontend:/app/node_modules            # node modules para el contenedor
    environment:
      - CHOKIDAR_USEPOLLING=true
      - NPM_CONFIG_CACHE=/tmp/npm-cache       # cache con permisos
    ports:
      - "5173:5173"                           # Puerto host : puerto predeterminado Vite
    command: >
      sh -lc "if [ ! -x node_modules/.bin/vite ]; then
                if [ -f package-lock.json ]; then
                  npm ci --no-audit --no-fund;
                else
                  npm i --no-audit --no-fund;
                fi;
              fi;
          npm run dev -- --host 0.0.0.0 --port 5173"
    depends_on:
      - backend                         # Para consumir la API

volumes:
  pgdata:
  backend_static:
  backend_media:
  node_modules_frontend:

